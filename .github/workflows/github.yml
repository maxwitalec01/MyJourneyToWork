name: Build and deploy ASP.Net Core app to Azure Web App - ca3devopsmjtw
'on':
  push:
    branches:
      - master
  workflow_dispatch: null
  
jobs:
  build:
    name: Build, Publish and Analyze
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.x
          include-prerelease: true
      - name: Build with dotnet
        run: dotnet build --configuration Release
      - name: dotnet publish
        run: 'dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp'
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: .net-app
          path: '${{env.DOTNET_ROOT}}/myapp'
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"maxwitalec01_MyJourneyToWork" /o:"maxwitalec01" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=**/coverage.xml

          dotnet tool install --global dotnet-coverage
          dotnet build --no-incremental
          dotnet-coverage collect "dotnet test" -f xml -o "coverage.xml"

          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
  production:
    runs-on: windows-latest
    needs: staging
    environment:
      name: Production
      url: '${{ steps.deploy-to-webapp.outputs.webapp-url }}'
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: .net-app
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ca3devopsmjtw
          slot-name: Production
          publish-profile: >-
            ${{
            secrets.AZUREAPPSERVICE_PUBLISHPROFILE_5C92E321495B4DA5BDE53382F847D9DB
            }}
          package: .
  staging:
    runs-on: windows-latest
    needs: [e2e-testing, k6_load_test, k6_smoke_test, k6_spike_test, k6_stress_test, security_test]
    environment:
      name: STAGING
      url: '${{ steps.deploy-to-webapp.outputs.webapp-url }}'
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: .net-app
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ca3devopsmjtw
          slot-name: STAGING
          publish-profile: '${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_STAGING }}'
          package: .
  QA:
    runs-on: windows-latest
    needs: build
    environment:
      name: QA
      url: '${{ steps.deploy-to-webapp.outputs.webapp-url }}'
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: .net-app
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ca3devopsmjtw
          slot-name: QA
          publish-profile: '${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_QA }}'
          package: .
  e2e-testing:
    name: E2E Testing
    runs-on: windows-latest
    needs: QA
    steps:
      - name: Check out Repository
        uses: actions/checkout@v4
        with:
          name: .net-app
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.x
          include-prerelease: true
      - name: run e2e test
        run: |
          cd Tests
          dotnet build
          pwsh bin/Debug/net7.0/playwright.ps1 install
          dotnet test -- NUnit.NumberOfTestWorkers=5
  k6_load_test:
    name: K6 Load Test
    runs-on: ubuntu-latest
    needs: QA
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Run local k6 test
      uses: grafana/k6-action@v0.2.0
      with: 
        filename: "Tests/PerformanceTesting/LoadTest.js"
      env:
       GITHUB_WORKSPACE: ${{ github.workspace }}
  security_test:     
    name: ZAP Security Test
    runs-on: ubuntu-latest
    needs: QA
    steps:
           - name: ZAP Scan
             uses: zaproxy/action-full-scan@v0.8.0
             with:
               target: 'https://ca3devopsmjtw-qa.azurewebsites.net/'  
               
  k6_smoke_test:
    name: K6 Smoke Test
    runs-on: ubuntu-latest
    needs: QA
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Run local k6 test
      uses: grafana/k6-action@v0.2.0
      with: 
        filename: "Tests/PerformanceTesting/SmokeTest.js"
      env:
       GITHUB_WORKSPACE: ${{ github.workspace }}

  k6_spike_test:
    name: K6 Spike Test
    runs-on: ubuntu-latest
    needs: QA
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Run local k6 test
      uses: grafana/k6-action@v0.2.0
      with: 
        filename: "Tests/PerformanceTesting/SpikeTest.js"
      env:
       GITHUB_WORKSPACE: ${{ github.workspace }}

  k6_stress_test:
    name: K6 stress Test
    runs-on: ubuntu-latest
    needs: QA
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Run local k6 test
      uses: grafana/k6-action@v0.2.0
      with: 
        filename: Tests/PerformanceTesting/StressTest.js
      env:
       GITHUB_WORKSPACE: ${{ github.workspace }}

  swap-to-green-slot:
    name: Swap to Green Slot
    runs-on: ubuntu-latest
    environment: Production
    needs: production
    steps:
      - name: "Checkout GitHub Action"
        uses: actions/checkout@main

      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Swap to green slot"
        uses: Azure/cli@v1
        with:
          inlineScript: |
            az webapp deployment slot swap --slot 'staging' --resource-group ca3_devops --name ca3devopsmjtw